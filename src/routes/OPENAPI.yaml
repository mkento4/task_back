openapi: 3.0.2
info:
  title: Example API server
  description: test API server
  version: 0.4.12
  termsOfService: 'https://github.com/kkiyama117/express_docker/'
  contact:
    name: API maintainer
    url: 'https://github.com/kkiyama117'
    email: k.kiyama117@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:{port}'
    description: The production API server
    variables:
      userId:
        default: '1'
        description: first User is created automatically
      port:
        enum:
          - '8443'
          - '8000'
          - '8001'
        default: '8443'
      basePath:
        default: v1
tags:
  - name: Note
    description: Everything about your Notes
    externalDocs:
      description: Find out more
      url: >-
        https://github.com/kkiyama117/express_docker/blob/master/src/entity/Note.ts
  - name: User
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: >-
        https://github.com/kkiyama117/express_docker/blob/master/src/entity/User.ts
  - name: Auth
    description: Operations about login and user
    externalDocs:
      description: Find out more about our store
      url: >-
        https://github.com/kkiyama117/express_docker/blob/master/src/entity/Auth.ts
paths:
  /notes:
    get:
      tags:
        - Note
      summary: get note to the store
      description: ''
      operationId: addNote
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '405':
          description: Invalid input
      security:
        - api_key: []
    post:
      tags:
        - Note
      summary: Create Note
      description: This can only be done by the logged in user.
      operationId: createNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        description: Created note object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      security:
        - api_key: []
  '/notes/{noteId}':
    get:
      tags:
        - Note
      summary: Find Note by ID
      description: Returns a single Note
      operationId: getPetById
      parameters:
        - name: noteId
          in: path
          description: ID of note to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
      security:
        - api_key: []
    post:
      tags:
        - Note
      summary: Updates a note in the store with form data
      description: ''
      operationId: updateNoteWithForm
      parameters:
        - name: noteId
          in: path
          description: ID of note that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []
    delete:
      tags:
        - Note
      summary: Deletes a Note
      description: ''
      operationId: deleteNote
      parameters:
        - name: noteId
          in: path
          description: Note id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
      security:
        - api_key: []
  /user:
    get:
      tags:
        - User
      summary: get note to the store
      description: ''
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
      security:
        - api_key: []
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_key: []
  '/user/{userId}':
    get:
      tags:
        - User
      summary: Get user by user name
      description: ''
      operationId: getUserByID
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
    post:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: Id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        description: Updated user object
        required: true
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid username/password supplied
components:
  schemas:
    UserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
          format: password
    User:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - id
          properties:
            id:
              type: number
              format: int32
    User_with_Role:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Note:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: note_1
        text:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: ADMIN
    GeneralError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Note:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
      description: Note object that needs to be added to the store
      required: true
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
  securitySchemes:
    api_key:
      type: http
      scheme: bearer
      bearerFormat: JWT
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'